org: ramisanhory
app: demo-app
service: myserverlessproject

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  profile: ramisanhory
  region: eu-central-1
  stage: dev
  lambdaHashingVersion: 20201221
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: "*"
  apiKeys:
    - free:
        - myFreeApitKey
    - paid:
        - myPaidApiKey
  usagePlan:
    - free:
        qouta:
          limit: 1000
          period: Month
        throttle:
          rateLimit: 5
          burstLimit: 20
    - paid:
        qouta:
          limit: 10000
          period: Month
        throttle:
          rateLimit: 50
          burstLimit: 200

plugins:
  - serverless-webpack
  - serverless-s3-sync

custom:
  tableName: player-points
  bucketName: myserverlessdemobucket-ramisanhory
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: UploadData

package:
  individually: true

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true

  getUserScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - http:
          path: get-user-score/{ID}
          method: GET
          cors: true

  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - http:
          path: create-player-score/{ID}
          method: POST
          cors: true

  updatePlayerScore:
    handler: lambdas/endpoints/updatePlayerScore.handler
    events:
      - http:
          path: update-player-score/{ID}
          method: PUT
          cors: true

  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true

  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
      - http:
          path: get-file/{fileName}
          method: get
          cors: true
          private: true

  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events:
      - http:
          path: send-email
          method: POST
          cors: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}

    MyDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
